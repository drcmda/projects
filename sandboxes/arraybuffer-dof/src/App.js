import * as THREE from 'three'
import React, { Suspense, useRef, useState } from 'react'
import { Canvas, useGraph } from '@react-three/fiber'
import { BakeShadows, OrbitControls, Environment, Sky, useGLTF, useCursor } from '@react-three/drei'
import { EffectComposer, DepthOfField, Bloom } from '@react-three/postprocessing'

/*
auto-generated by: https://github.com/pmndrs/gltfjsx
author: Tochi-Tan (https://sketchfab.com/Tochi-Tan)
license: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
source: https://sketchfab.com/models/f407b224ac544e3ea9b0559c64fa7d20
title: Working Space
*/
function Model(props) {
  // Normally you would use the useLoader hook in order to load assets, but let's try loading a buffer you already have ...
  // use-asset is the library that allows r3f to use suspense, you can use it raw to put the component into suspense
  const { scene } = useGLTF('/scene.glb')
  // useGraph builds a collection for all nodes/materials contained in the target
  const { nodes, materials } = useGraph(scene)
  const [hovered, set] = useState(false)
  useCursor(hovered, 'crosshair')
  // Once you have these collections the view can be laid out declaratively and you get to make changes to it easily
  return (
    <group {...props} onPointerOver={(e) => set(true)} onPointerOut={() => set(false)}>
      <group rotation={[-Math.PI / 2, 0, 0]} />
      <mesh receiveShadow castShadow material={materials['palette.001']} geometry={nodes.chambre.geometry} rotation={[Math.PI / 2, 0, 0]} />
    </group>
  )
}

const vec = new THREE.Vector3()
function Effects({ children }) {
  const ref = useRef()
  return (
    <group
      onPointerMove={(e) => {
        e.stopPropagation()
        ref.current?.target.lerp(e.point, 0.2)
      }}>
      {children}
      <EffectComposer multisampling={8}>
        <Bloom kernelSize={4} luminanceThreshold={0.6} luminanceSmoothing={0.06} />
        <DepthOfField ref={ref} target={vec} focalLength={0.4} bokehScale={5} height={300} />
      </EffectComposer>
    </group>
  )
}

export default function App() {
  return (
    <Canvas
      shadows
      dpr={[1, 2]}
      gl={{ antialias: false, stencil: false, depth: false, alpha: false }}
      camera={{ position: [-5, 2, 1], fov: 75, near: 0.1, far: 25 }}>
      <ambientLight intensity={0.1} />
      <pointLight position={[-10, 10, 10]} intensity={0.4} color="orange" castShadow />
      <pointLight position={[10, 5, 5]} castShadow shadow-bias={-0.0001} penumbra={1} angle={0.4} />
      <Suspense fallback={null}>
        <Effects>
          <group position={[0, -1, 0]}>
            <Model />
            <mesh rotation-x={-Math.PI / 2}>
              <planeBufferGeometry args={[100, 100]} />
              <meshStandardMaterial color="lightblue" />
            </mesh>
          </group>
        </Effects>
        <Environment />
        <BakeShadows />
      </Suspense>
      <Sky sunPosition={[100, 20, 100]} />
      <OrbitControls />
    </Canvas>
  )
}
