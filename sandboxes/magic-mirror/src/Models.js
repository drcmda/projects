import { useRef } from 'react'
import { useFrame } from '@react-three/fiber'
import { useGLTF } from '@react-three/drei'

export function Farm(props) {
  const { scene } = useGLTF('https://market-assets.fra1.cdn.digitaloceanspaces.com/market-assets/models/low-poly-farm/model.gltf')
  return <primitive object={scene} {...props} />
}

export function Ramen(props) {
  const { scene } = useGLTF('https://market-assets.fra1.cdn.digitaloceanspaces.com/market-assets/models/bowl-broth/model.gltf')
  return <primitive object={scene} {...props} />
}

export function Soda(props) {
  const { scene } = useGLTF('https://market-assets.fra1.cdn.digitaloceanspaces.com/market-assets/models/soda-bottle/model.gltf')
  return <primitive object={scene} {...props} />
}

export function Heli(props) {
  const group = useRef()
  const fin = useRef()

  // Load the gltf model
  const { nodes, materials } = useGLTF('https://market-assets.fra1.cdn.digitaloceanspaces.com/market-assets/models/helicopter/model.gltf')

  useFrame((state, delta) => {
    // This function runs 60 times/second, it binds this component to the render-loop.
    // On unmount this subscription is cleaned up automatically.

    // Rotate fins
    const t = state.clock.getElapsedTime()
    fin.current.rotation.y += delta * 20

    // Make it float
    group.current.rotation.z = Math.sin(t / 1.5) / 5
    group.current.rotation.x = Math.cos(t) / 5
    group.current.rotation.y = Math.sin(t / 2) / 10
    group.current.position.y = 0.5 + (1 + Math.sin(t / 1.5)) / 5
  })

  // The JSX scene graph was auto-generated by: https://github.com/pmndrs/gltfjsx
  // gltfjsx comes in handy when you want to alter the gltf without having
  // to traverse the model data. It is also immutable, so our helicopter could
  // be invoked multiple times, add <Heli position={[6, -0.2, -4]} />  in the <App />
  // component to see it. With a normal gltf this is not possible without cloning.

  return (
    <group {...props} dispose={null}>
      <group ref={group}>
        <mesh geometry={nodes.BackMotor.geometry} material={nodes.BackMotor.material} position={[-0.14, 1.14, -3.11]} />
        <mesh geometry={nodes.BackWingsContainer.geometry} material={nodes.BackWingsContainer.material} position={[-0.2, 1.14, -3.1]} />
        <mesh geometry={nodes.GlassGasket.geometry} material={materials.WindsheildGasket} position={[0.39, 1.08, 0.2]} />
        <mesh geometry={nodes.GlassGasketTwo.geometry} material={materials['WindsheildGasket.001']} position={[0.44, 1.09, 0.51]} />
        <mesh geometry={nodes.EngineStrut.geometry} material={nodes.EngineStrut.material} position={[0.29, 3.06, -0.35]} />
        <mesh geometry={nodes.HelicopterBody001.geometry} material={nodes.HelicopterBody001.material} position={[1110.33, 0.72, -196.12]} />
        <mesh geometry={nodes.Plane001.geometry} material={nodes.Plane001.material} position={[-0.22, 1.51, -3.17]} />
        <mesh geometry={nodes.TopEngine.geometry} material={nodes.TopEngine.material} position={[0.25, 1.73, -0.56]} />
        <mesh geometry={nodes.HelicopterBackWings.geometry} material={nodes.HelicopterBackWings.material} position={[-0.23, 1.14, -3.09]} />
        <group position={[0.44, 1.08, 0.48]}>
          <mesh geometry={nodes.Sphere007.geometry} material={materials.Windsheild} material-transparent material-opacity={0.5} />
          <mesh geometry={nodes.Sphere007_1.geometry} material={materials.WindSheildDark} material-transparent material-opacity={0.5} />
        </group>
        <mesh geometry={nodes.StandPlane.geometry} material={materials.Stand} position={[-2183.61, 0.37, 385.46]} />
        <group position={[0.24, 1.09, -0.64]}>
          <mesh geometry={nodes.Sphere010.geometry} material={nodes.TopEngine.material} />
          <mesh geometry={nodes.Sphere010_1.geometry} material={materials.Interior} />
        </group>
        <mesh
          ref={fin}
          geometry={nodes.TopFin.geometry}
          material={nodes.TopFin.material}
          position={[0.29, 2.34, -0.35]}
          rotation={[Math.PI, -0.53, Math.PI]}
        />
      </group>
    </group>
  )
}
